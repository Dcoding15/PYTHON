Feature Enginnering: -
-------------------
    1. EDA (Expolatory Data Analysis).
        a. If numerical feature may be there, then use plots.
        b. If categorical feature may be there, then group those different categories.
        c. If there are any missing values using plots.
        d. If there are any outliers use boxplot.
        e. Whether raw data needs cleaning.
    2. Handling the missing values.
        a. Mean
        b. Median
        c. Mode
    3. Handling Imbalanced dataset.
    4. Treating the outliers.
    5. Scaling the data (transformation).
    6. Converting the categoriacal feature into numerical feature.

Feature Scaling: -
---------------
    1. It is a technique to standardise the independent features present in the data in a fixed range.

Types of Encoding: -
-----------------
    1. Nominal Encoding (consider numerical data)
        a. One Hot Encoding
        b. One Hot Encoding with many categories
        c. Mean Encoding
        d. Count of Frequency Encoding
    2. Ordinal Encoding (consider ranking data)
        a. Label Encoding
        b. Target Guided Ordinal Encoding

Handling Missing Values In Categorical Variable: -
-----------------------------------------------
    1. Delete the rows
    2. Replace with the most frequent values
    3. Apply classifier algorithm to predict (if any row has blank column then it will consider as test dataset)
    4. Apply unsupervised ML

Types of Transformation: -
-----------------------
    1. Normalisation and Standardisation: -
            from sklearn.preprocessing import StandardScaler
            x' = ( x[i] - mean(x) ) / standard_deviation(x), Range: -1 to 1
        Normalisation: -
    2. Scaling to Minimum and Maximum value: -
            from sklean.preprocessing import MinMaxScaler
            x' = (x[i] - min(x)) / (max(x) - min(x)), Range: 0 to 1
    3. Scaling to Median and Qualities: -
            from sklearn.preprocessing import RobustScaler
            x' = (x - median(x)) / (75th_quantile - 25th_quantile)
    
    from skle`arn.model_selection import train_test_split
    from sklean.preprocessing import [name_of_feature_transformation]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random=10)
    scaler = [name_of_feature_transformation]()
    x_train_scaled = scaler.fit_transform(X_train)
    x_test_scaled = scaler.transform(X_test)
    Note: -
        X is independent feature
        y is dependent feature

    4. Guassian Transformation: -
            First check whether feature is gaussian or normal distribution using Q-Q plot.
    5. Logarithmic Transformation: -
            import numpy as np
            new_feature_column = np.log(old_feature_column)
    6. Reciprocal Transformation: -
            new_feature_column = 1/old_feature_column
    7. Square root Transformation: -
            new_feature_column = old_feature_column**(1/2)
    8. Exponential Transformation: -
            new_feature_column = old_feature_column**(1/1.2)
    9. Box Cox Transformation: -
            T(Y) = (Y exp(lambda) - 1)/lambda
            Y is response variable
            lambda is transform parameters which varies from -5 to 5

            from scipy.stats import stat
            new_feature_column,parameters = stat.boxcox(old_feature_column)
    10. Fare Transformation: -
            import numpy as np
            new_feature_column = np.log1p(old_feature_column)

EDA using Univariate Analysis (This is only for single column analysis): -
----------------------------
1. Categorical Data
    a. Count Plot
    b. Pie Chart
2. Numerical Data
    a. Histogram
    b. Distplot
    c. Boxplot

EDA using Bivariate and Multivariate (This is only for two or more column analysis): -
------------------------------------
1. Numerical to Numerical
    a. Scatter Plot
    b. Pairplot - Collection of scatter plot
    c. Lineplot
2. Numerical to Categorical
    a. Bar Plot
    b. Box Plot
    c. Displot
5. Categorial to Categorial
    a. HeatMap
    b. ClusterMap

Pandas Profiler: -
---------------
Install pandas profiling    -> pip install pandas-profiling
Code: -
----
from ydata_profiling import ProfileReport
import pandas as pd
df = pd.read_csv('data.csv')
prof = ProfileReport(df)
prof.to_file(output_file='output.html')