#! /usr/bin/python3

'''
DESCRIPTION
    The module supports three basic APIs: reading, writing, and registration of dialects.


    DIALECT REGISTRATION: -
    --------------------

    Readers and writers support a dialect argument, which is a convenient handle on a group of settings.
    When the dialect argument is a string, it identifies one of the dialects previously registered with the module.
    If it is a class or instance, the attributes of the argument are used as the settings for the reader or writer:

        class excel:
            delimiter = ','
            quotechar = '"'
            escapechar = None
            doublequote = True
            skipinitialspace = False
            lineterminator = '\r\n'
            quoting = QUOTE_MINIMAL

        * quotechar - specifies a one-character string to use as the quoting character.
                      It defaults to '"'.

        * delimiter - specifies a one-character string to use as the field separator.
                      It defaults to ','.

        * skipinitialspace - specifies how to interpret spaces which immediately follow a delimiter.
                             It defaults to False, which means that spaces immediately following a delimiter is part of the following field.

        * lineterminator -  specifies the character sequence which should terminate rows.

        * quoting - controls when quotes should be generated by the writer.
            It can take on any of the following module constants:

            csv.QUOTE_MINIMAL     means only when required, for example, when a field contains either the quotechar or the delimiter
            csv.QUOTE_ALL         means that quotes are always placed around fields.
            csv.QUOTE_NONNUMERIC  means that quotes are always placed around fields which do not parse as integers or floating point numbers.
            csv.QUOTE_NONE        means that quotes are never placed around fields.

        * escapechar - specifies a one-character string used to escape the delimiter when quoting is set to QUOTE_NONE.

        * doublequote - controls the handling of quotes inside fields. When True, two consecutive quotes are interpreted as one during read, and when writing, each quote character embedded in the data is written as two quotes

    class Dialect(builtins.object)
     |  Describe a CSV dialect.
     |
     |  This must be subclassed (see csv.excel). Valid attributes are:
     |  delimiter, quotechar, escapechar, doublequote, skipinitialspace,
     |  lineterminator, quoting.
     |
     |  Data and other attributes defined here:
     |
     |  delimiter = None
     |  doublequote = None
     |  escapechar = None
     |  lineterminator = None
     |  quotechar = None
     |  quoting = None
     |  skipinitialspace = None

    class DictReader(builtins.object)
     |  DictReader(f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)

    class DictWriter(builtins.object)
     |  DictWriter(f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)
     |
     |  Methods defined here:
     |
     |  writeheader(self)
     |  writerow(self, rowdict)
     |  writerows(self, rowdicts)


    class Sniffer(builtins.object)
     |  "Sniffs" the format of a CSV file (i.e. delimiter, quotechar). Returns a Dialect object.
     |
     |  Methods defined here:
     |
     |  has_header(self, sample)
     |  sniff(self, sample, delimiters=None)
     |      Returns a dialect (or None) corresponding to the sample

    class excel(Dialect)
     |  Describe the usual properties of Excel-generated CSV files.
     |
     |  Data and other attributes defined here:
     |  delimiter = ','
     |  doublequote = True
     |  lineterminator = '\r\n'
     |  quotechar = '"'
     |  quoting = 0
     |  skipinitialspace = False
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Dialect:
     |
     |  escapechar = None

    class excel_tab(excel)
     |  Describe the usual properties of Excel-generated TAB-delimited files.
     |
     |  Data and other attributes defined here:
     |
     |  delimiter = '\t'
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from excel:
     |
     |  doublequote = True
     |  lineterminator = '\r\n'
     |  quotechar = '"'
     |  quoting = 0
     |  skipinitialspace = False
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Dialect:
     |
     |  escapechar = None

    class unix_dialect(Dialect)
     |  Describe the usual properties of Unix-generated CSV files.
     |
     |  Data and other attributes defined here:
     |
     |  delimiter = ','
     |  doublequote = True
     |  lineterminator = '\n'
     |  quotechar = '"'
     |  quoting = 1
     |  skipinitialspace = False
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Dialect:
     |
     |  escapechar = None

FUNCTIONS
    field_size_limit([limit])
        Sets an upper limit on parsed fields. Returns old limit. If limit is not given, no new limit is set and the old limit is returned

    get_dialect(name)
        Return the dialect instance associated with name.

    list_dialects()
        Return a list of all known dialect names.

    reader(iterable [, dialect='excel'] | [optional keyword args])
        The returned object is an iterator. Each iteration returns a row of the CSV file (which can span multiple input lines).

    register_dialect(name[, dialect[, **fmtparams]])
        Create a mapping from a string name to a dialect class.

    unregister_dialect(name)
        Delete the name/dialect mapping associated with a string name.

    writer(fileobj [, dialect='excel'] | [optional keyword args])
        The "fileobj" argument can be any object that supports the file API.
